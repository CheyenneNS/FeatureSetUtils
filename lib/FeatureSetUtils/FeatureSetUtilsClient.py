# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class FeatureSetUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def upload_featureset_from_diff_expr(self, params, context=None):
        """
        upload_featureset_from_diff_expr: create a FeatureSet object from a RNASeqDifferentialExpression object
        :param params: instance of type "UploadFeatureSetFromDiffExprInput"
           (required params: diff_expression_ref: RNASeqDifferetialExpression
           object reference feature_set_name:  result FeatureSet object name
           p_cutoff: p value cutoff q_cutoff: q value cutoff fold_scale_type:
           one of ["linear", "log2+1", "log10+1"] fold_change_cutoff: fold
           change cutoff workspace_name: the name of the workspace it gets
           saved to) -> structure: parameter "diff_expression_ref" of type
           "obj_ref" (An X/Y/Z style reference), parameter "feature_set_name"
           of String, parameter "p_cutoff" of Double, parameter "q_cutoff" of
           Double, parameter "fold_scale_type" of String, parameter
           "fold_change_cutoff" of Double, parameter "workspace_name" of
           String
        :returns: instance of type "UploadFeatureSetFromDiffExprResult"
           (result_directory: folder path that holds all files generated by
           upload_featureset_from_diff_expr feature_set_ref: generated
           FeatureSet object reference report_name: report name generated by
           KBaseReport report_ref: report reference generated by KBaseReport)
           -> structure: parameter "result_directory" of String, parameter
           "feature_set_ref" of type "obj_ref" (An X/Y/Z style reference),
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'FeatureSetUtils.upload_featureset_from_diff_expr',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('FeatureSetUtils.status',
                                        [], self._service_ver, context)
